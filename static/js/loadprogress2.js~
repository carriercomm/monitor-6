setInterval(updateProgress, 1000);

function updateProgress () { 
	var url = '/progress';

	var req = new XMLHttpRequest();

	req.onreadystatechange = function() {
		if (req.readyState === 4) {
			var responseHeaders = req.getAllResponseHeaders();
			var progressData = req.responseText;
			var progressDataJSON = parseData(progressData);
			//console.log(progressData['mem'])
			reloadProgress(progressDataJSON);
		}
	};

	req.open('GET', url ,true);
	req.setRequestHeader('X-Requested-With','XMLHttpRequest');
	req.send(null);
}

// thanks Doug... http://www.json.org/js.html
function parseData(mydata) {
	var myData = JSON.parse(mydata, function (key, value) {
			var type;
			if (value && typeof value === 'object') {
				type = value.type;
				if (typeof type === 'string' && typeof window[type] === 'function') {
					return new (window[type])(value);
				}
			}
			return value;
		});
	return myData;
}

function reloadProgress(pData) {	
	//loop through json update prog bar and percent html  	
	for (i in pData) {

		var prog_span = document.getElementById( i + "-progress-span");
		var prog_bar = document.getElementById( i + "-progress-bar");

		prog_span.innerHTML = pData[i] + '%';
		prog_bar.value = pData[i];
		
	}

}


window.onload = function() {
	graphProcess();
}
	
	function graphProcess() {
		
		var tv = 1000;

		// instantiate our graph!
		var graph = new Rickshaw.Graph( {
				element: document.getElementById("graph"),
				width: 940,
				height: 200,
				renderer: 'line',
				series: new Rickshaw.Series.FixedDuration([{ name: 'one' }], undefined, {
						timeInterval: tv,
						maxDataPoints: 100,
						timeBase: new Date().getTime() / 1000
					}) 
			} );

		graph.render();

		// add some data every so often

		var i = 0;
		var iv = setInterval( function() {
				
				var data = { one: Math.floor(Math.random() * 40) + 120 };
				
				var randInt = Math.floor(Math.random()*100);
				data.two = (Math.sin(i++ / 40) + 4) * (randInt + 4000);
				data.three = randInt + 300;
				
				graph.series.addData(data);
				graph.render();
				
			}, tv );

	}

		
